import React, { useState, useEffect } from "react";
import Head from "next/head";

import SectionCategory from "../../components/Home/SectionCategory";
import movieApi from "../../api/movieApi";

import { Select } from "antd";

const { Option } = Select;

export async function getServerSideProps({ params }) {
  const res = await movieApi.getSearchList();
  const dataSearch = res.data.data;

  return {
    props: {
      searchConfig: dataSearch,
    },
  };
}
const TaCaPhim = (searchConfig) => {
  const [region, setRegion] = useState("");

  const [params, setParams] = useState(searchConfig.searchConfig[0].params);

  const [category, setCategory] = useState("");

  const [time, setTime] = useState("");

  const [sub, setSub] = useState("");

  const [recent, setRecent] = useState("");

  const [dataMovie, setDataMovie] = useState([]);

  console.log(searchConfig);

  useEffect(() => {
    const getMovie = async () => {
      const data = {
        size: 50,
        params: params,
        area: region,
        category: category,
        year: time,
        subtitles: sub,
        order: recent,
      };
      console.log(data);
      const res = await movieApi.getSearch(data);
      setDataMovie(res.data.data.searchResults);
    };
    getMovie();
  }, [params, category, region, time, sub, recent]);

  function onChange(value) {
    const index = value.indexOf("-");
    console.log(index);
    const type = value.slice(0, index);
    const params = value.slice(index + 1, value.length);
    console.log(type);
    console.log(params);
    switch (type) {
      case "category":
        setCategory(params);
        break;
      case "area":
        setRegion(params);
        break;
      case "year":
        setTime(params);
        break;
      case "subtitles":
        setSub(params);
        break;
      case "order":
        setRecent(params);
        break;
    }

    console.log(`selected ${value}`);
  }

  const hanldeClickParams = (value) => {
    setParams(value);
    setCategory("");
    setRecent("");
    setRegion("");
    setSub("");
    setTime("");
  };

  return (
    <>
      <Head>
        <title>Lọc Phim </title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
        <link rel="stylesheet" href="" />
      </Head>
      <div className="bg-black">
        <div className="pt-[6rem] mx-auto max-w-[1200px] px-[15px] bg-black min-h-screen">
          <div className="flex justify-start mb-5">
            {searchConfig.searchConfig.map((item, index) => {
              return (
                <button
                  className={`mr-5 border-white border-[.1rem] px-3 py-2 ${
                    item.params === params ? "!border-primary " : ""
                  }`}
                  onClick={() => {
                    hanldeClickParams(item.params);
                  }}
                  key={index}
                >
                  {item.name}
                </button>
              );
            })}
          </div>
          {searchConfig.searchConfig.map((item, index) => {
            return (
              <div className="relative flex justify-between" key={index}>
                {item.params === params &&
                  item.screeningItems.map((item) => (
                    <Select
                      showSearch
                      placeholder="Select"
                      className={`min-w-[13rem]`}
                      optionFilterProp="children"
                      onChange={onChange}
                      defaultValue={`${item.items[0].screeningType}-${item.items[0].params}`}
                      filterOption={(input, option) =>
                        option.children
                          .toLowerCase()
                          .indexOf(input.toLowerCase()) >= 0
                      }
                    >
                      {item.items.map((item) => (
                        <Option value={`${item.screeningType}-${item.params}`}>
                          {item.name}
                        </Option>
                      ))}
                    </Select>
                  ))}
              </div>
            );
          })}
          <div className="">
            {dataMovie.length === 0 ? (
              <div className="mt-[10px] text-lg">Kết quả lọc không có</div>
            ) : (
              <SectionCategory data={dataMovie} className="!grid-cols-6" />
            )}
          </div>
        </div>
      </div>
    </>
  );
};

export default TaCaPhim;
